{"version":3,"sources":["components/SineWave/SineWave.js","utils/index.js","components/SelectionField/SelectionField.js","hooks/useMouse.js","api/initialEvents.js","views/SignalView/SignalView.js","App.js","reportWebVitals.js","index.js"],"names":["SineWave","samplingRate","lowerBound","upperBound","other","points","useMemo","delta","i","j","x","y","Math","sin","push","data","labels","map","datasets","label","borderColor","options","maintainAspectRatio","plugins","legend","display","elements","point","radius","scales","type","ticks","stepSize","animation","duration","getStartOrEndPositionBoundary","position","boundaryRightMax","window","outerWidth","getFullBoundary","getSecondsFromPixels","pixels","toFixed","convertSecondsToPixels","seconds","SelectionField","pixel","fieldId","start","end","height","isMouseDownParent","onResize","active","ref","useRef","useState","isToolTipShown","setToolTip","trueStart","trueEnd","refBoundingRectValues","current","getBoundingClientRect","top","left","width","abs","toolTipText","getCorrectedRightBoundarySecondsFromPixels","stopPropagation","_e","onMouseMove","onMouseDownEl","onMouseUpEl","mouseDirection","setMouseDirection","lastKnownMouseDirection","isMouseOverTargetEl","setIsMouseOverTargetEl","isMouseDown","setIsMouseDown","mousePositionOnEL","setMousePositionOnEL","currentMousePosition","setCurrentMousePosition","mouseDownPositionStatus","setMouseDownPositionStatus","currentMouseDownPosition","setCurrentMouseDownPosition","currentMouseUpPosition","setCurrentMouseUpPosition","refBoundingRect","getMousePositionStatus","mousePosition","right","returnValues","isMovingLeft","isMovingRight","isLeft","isMiddle","isRight","useEffect","overlayEl","document","querySelector","mouseMoveListener","e","target","contains","currentDirection","currentMousePositionStatus","pageX","currentMouseDirection","addEventListener","removeEventListener","mouseDownListener","mouseUpListener","overEl","mouseDownPosition","useMouse","_obj","obj","className","style","zIndex","background","borderRadius","boxSizing","border","cursor","onMouseOut","onMouseEnter","onMouseLeave","padding","MemoizedSelectionField","memo","initialEvents","id","Container","styled","div","Overlay","ChartWrapper","SignalView","chartWrapperRef","mouseDown","setMouseDown","currentSelectionID","setCurrentSelectionID","selections","setSelections","handleSelectionFieldResize","useCallback","mouseContext","el","prevSelections","prevSelection","generatedID","elBoundingRect","diff","isMouseMovingRight","newLeft","newRight","keyBasedOnDirection","Promise","resolve","setTimeout","then","res","mapped","item","keyListener","key","filter","onMouseDown","currentCursorPosition","Date","now","toString","random","substr","currentSpot","onMouseUp","cleanObj","selection","clientHeight","textDecoration","onClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8cd85e93.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\nimport { Line } from \"react-chartjs-2\";\n\nconst SineWave = ({ samplingRate, lowerBound, upperBound, ...other }) => {\n    const points = useMemo(() => {\n        const points = [];\n        const delta = 1/samplingRate;\n        for (let i = lowerBound; i < upperBound; i++) {\n            for (let j = 0; j < samplingRate; j++) {\n                const x = i + j * delta;\n                const y = Math.sin(x);\n                points.push([x, y]);\n            }\n        }\n        return points;\n    }, [ samplingRate, lowerBound, upperBound ]);\n\n    return (\n        <Line\n            data={{\n                labels: points.map(([ x, _ ]) => x),\n                datasets: [{\n                    label: 'Sine Wave',\n                    data: points.map(([ _, y ]) => y),\n                    borderColor: 'rgb(255, 99, 132)'\n                }]\n            }}\n            options={{\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: false\n                    }\n                },\n                elements: {\n                    point: {\n                        radius: 0,\n                    },\n                },\n                scales: {\n                    x: {\n                        type: 'linear',\n                        ticks: {\n                            stepSize: 1\n                        }\n                    },\n                    y: {\n                        ticks: {\n                            stepSize: 1\n                        }\n                    }\n                },\n                animation: {\n                    duration: 0,\n                },\n            }}\n            {...other}\n        />\n    );\n};\n\nexport default SineWave;\n","export const uid = function () {\n  return Date.now().toString(36) + Math.random().toString(36).substr(2);\n};\n\nexport const correctSelectionFieldPosition = (number) => number - 26;\n\nexport const LEFT_BOUNDARY = 25;\nexport const RIGHT_BOUNDARY = 9;\n\nexport const getStartOrEndPositionBoundary = (position) => {\n  const windowWidth = window.outerWidth;\n  const boundaryRightMax = windowWidth - RIGHT_BOUNDARY;\n  const boundaryLeftMax = LEFT_BOUNDARY;\n\n  if (position <= boundaryLeftMax) return boundaryLeftMax;\n  if (position >= boundaryRightMax) return boundaryRightMax;\n  return position;\n};\n\nexport const getFullBoundary = () => {\n  const windowWidth = window.outerWidth;\n  const boundaryMax = windowWidth - RIGHT_BOUNDARY - LEFT_BOUNDARY;\n\n  return boundaryMax;\n};\n\nexport const getSecondsFromPixels = (pixels) => {\n  const oneSecondOfPixels = getFullBoundary() / 10;\n\n  return (pixels / oneSecondOfPixels).toFixed(3);\n};\n\nexport const getCorrectedLeftBoundarySecondsFromPixels = (pixel) =>\n  getSecondsFromPixels(pixel - LEFT_BOUNDARY);\n\nexport const getCorrectedRightBoundarySecondsFromPixels = (pixel) =>\n  getSecondsFromPixels(pixel - LEFT_BOUNDARY);\n\nexport const convertSecondsToPixels = (seconds) => {\n  const oneSecondOfPixels = getFullBoundary() / 10;\n  return seconds * oneSecondOfPixels + LEFT_BOUNDARY;\n};\n","import { memo, useRef, useState } from \"react\";\nimport { useMouse } from \"../../hooks/useMouse\";\nimport {\n  getCorrectedLeftBoundarySecondsFromPixels,\n  getCorrectedRightBoundarySecondsFromPixels,\n  getSecondsFromPixels,\n} from \"../../utils\";\n\nfunction SelectionField({\n  fieldId,\n  start,\n  end,\n  height,\n  isMouseDownParent,\n  onResize,\n  active,\n}) {\n  const ref = useRef(null);\n\n  const [isToolTipShown, setToolTip] = useState(false);\n  const trueStart = start < end ? start : end; //this covers the initial creation for going left or right\n  const trueEnd = end > start ? end : start;\n\n  const refBoundingRectValues = ref.current?.getBoundingClientRect();\n  const top = refBoundingRectValues?.top - 60;\n  const left = refBoundingRectValues?.left;\n  const width = Math.abs(start - end);\n\n  const toolTipText = `Start ${getCorrectedLeftBoundarySecondsFromPixels(\n    trueStart\n  )}s - End ${getCorrectedRightBoundarySecondsFromPixels(\n    trueEnd\n  )}s | Duration ${getSecondsFromPixels(width)}s`;\n\n  const stopPropagation = (_e) => {\n    if (!isMouseDownParent) {\n      _e.stopPropagation();\n    }\n  };\n\n  const updateToolTip = (e) => {\n    if (!isMouseDownParent) {\n      setToolTip(true);\n    }\n  };\n\n  const handleOnMouseEnterSelectionField = (_e) => {\n    stopPropagation(_e);\n    updateToolTip(_e);\n  };\n\n  const { isLeft, isMiddle, isRight } = useMouse({\n    ref,\n    onMouseDownEl: (e, _obj) => {\n      stopPropagation(e);\n    },\n    onMouseMove: (_e, obj) => {\n      if (obj.isMouseDown) {\n        onResize?.(fieldId, obj, ref?.current);\n      }\n    },\n  });\n\n  const getBorderColor = () => {\n    if (active) return \"lightgreen\";\n    if (isToolTipShown) return \"skyblue\";\n\n    return \"blue\";\n  };\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className=\"selectionField\"\n        style={{\n          zIndex: 11,\n          position: \"absolute\",\n          height: height ?? 107,\n          width,\n          background: \"rgb(0 0 255 / 59%)\",\n          top: 10,\n          left: trueStart,\n          borderRadius: 12,\n          boxSizing: \"border-box\",\n          border: `3px solid ${getBorderColor()}`,\n          ...(isRight && {\n            cursor: \"col-resize\",\n          }),\n          ...(isMiddle && {\n            cursor: \"move\",\n          }),\n          ...(isLeft && {\n            cursor: \"col-resize\",\n          }),\n        }}\n        onMouseOut={(e) => {\n          stopPropagation(e);\n        }}\n        onMouseEnter={handleOnMouseEnterSelectionField}\n        onMouseLeave={(e) => {\n          stopPropagation(e);\n          setToolTip(false);\n        }}\n      ></div>\n      {isToolTipShown && (\n        <div\n          style={{\n            position: \"fixed\",\n            top,\n            left,\n            padding: 16,\n            background: \"rgb(0 0 0 / 20%)\",\n            borderRadius: 12,\n            border: \"2px solid black\",\n          }}\n        >\n          {toolTipText}\n        </div>\n      )}\n    </>\n  );\n}\n\nexport const MemoizedSelectionField = memo(SelectionField);\n","import { useEffect, useRef, useState } from \"react\";\n\nexport function useMouse({ ref, onMouseMove, onMouseDownEl, onMouseUpEl }) {\n  const [mouseDirection, setMouseDirection] = useState(null);\n  const lastKnownMouseDirection = useRef(null);\n  const [isMouseOverTargetEl, setIsMouseOverTargetEl] = useState(false);\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [mousePositionOnEL, setMousePositionOnEL] = useState(null);\n  const [currentMousePosition, setCurrentMousePosition] = useState(null);\n  const [mouseDownPositionStatus, setMouseDownPositionStatus] = useState(null);\n  const [currentMouseDownPosition, setCurrentMouseDownPosition] =\n    useState(null);\n  const [currentMouseUpPosition, setCurrentMouseUpPosition] = useState(null);\n\n  const refBoundingRect = ref.current?.getBoundingClientRect();\n\n  const getMousePositionStatus = (mousePosition) => {\n    if (mousePosition >= refBoundingRect?.right - 6) {\n      return \"right\";\n    } else if (mousePosition <= refBoundingRect?.left + 6) {\n      return \"left\";\n    } else {\n      return \"middle\";\n    }\n  };\n\n  const returnValues = {\n    mouseDirection,\n    isMovingLeft: mouseDirection === \"left\",\n    isMovingRight: mouseDirection === \"right\",\n    isMouseOverTargetEl,\n    isMouseDown,\n    mousePositionOnEL,\n    isLeft: mouseDownPositionStatus === \"left\" || mousePositionOnEL === \"left\",\n    isMiddle:\n      mouseDownPositionStatus === \"middle\" || mousePositionOnEL === \"middle\",\n    isRight:\n      mouseDownPositionStatus === \"right\" || mousePositionOnEL === \"right\",\n    currentMousePosition,\n    mouseDownPositionStatus,\n    currentMouseDownPosition,\n    currentMouseUpPosition,\n  };\n\n  //   Track mouse movements in and out of the target el\n  useEffect(() => {\n    const overlayEl = document.querySelector(\".overlay\");\n\n    const mouseMoveListener = (e) => {\n      const isMouseOverTargetEl = e.target.contains(ref.current);\n      setIsMouseOverTargetEl(isMouseOverTargetEl);\n      const currentMousePositionStatus = getMousePositionStatus(e.pageX);\n      setMousePositionOnEL(currentMousePositionStatus);\n\n      setCurrentMousePosition(e.pageX);\n\n      let currentDirection;\n\n      if (lastKnownMouseDirection.current === e.pageX) return;\n\n      if (lastKnownMouseDirection.current) {\n        currentDirection =\n          lastKnownMouseDirection.current > e.pageX ? \"left\" : \"right\";\n        setMouseDirection(currentDirection);\n      }\n\n      onMouseMove?.(e, {\n        currentMousePositionStatus,\n        lastKnownMouseDirection: lastKnownMouseDirection.current,\n        currentMousePosition: e.pageX,\n        currentMouseDirection: currentDirection,\n        isMouseOverTargetEl,\n        isMouseDown,\n        mouseDownPositionStatus,\n        currentMouseDownPosition,\n        currentMouseUpPosition,\n      });\n\n      lastKnownMouseDirection.current = e.pageX;\n    };\n\n    overlayEl?.addEventListener(\"mousemove\", mouseMoveListener);\n\n    return () => {\n      overlayEl?.removeEventListener(\"mousemove\", mouseMoveListener);\n    };\n  }, [\n    ref.current,\n    isMouseDown,\n    mouseDownPositionStatus,\n    currentMouseDownPosition,\n    currentMouseUpPosition,\n  ]);\n\n  //   Tracking mouse down/mouse up\n  useEffect(() => {\n    const overlayEl = document.querySelector(\".overlay\");\n    const mouseDownListener = (e) => {\n      const overEl = e.target.contains(ref.current);\n      if (!overEl) return;\n      const mouseDownPositionStatus = getMousePositionStatus(e.pageX);\n\n      setMouseDownPositionStatus(mouseDownPositionStatus);\n      setCurrentMouseDownPosition(e.pageX);\n      setIsMouseDown(true);\n\n      onMouseDownEl?.(e, { ...returnValues, isMouseDown: true });\n    };\n\n    const mouseUpListener = (e) => {\n      const overEl = e.target.contains(ref.current);\n      setIsMouseDown(false);\n\n      if (!overEl) return;\n\n      setMouseDownPositionStatus(null);\n      setCurrentMouseUpPosition(e.pageX);\n\n      onMouseUpEl?.(e, {\n        ...returnValues,\n        isMouseDown: false,\n        mouseDownPosition: mouseDownPositionStatus,\n      });\n    };\n\n    ref.current?.addEventListener(\"mousedown\", mouseDownListener);\n    overlayEl.addEventListener(\"mouseup\", mouseUpListener);\n\n    return () => {\n      ref.current?.removeEventListener(\"mousedown\", mouseDownListener);\n      overlayEl.removeEventListener(\"mouseup\", mouseUpListener);\n    };\n  }, [\n    ref,\n    returnValues.isLeft,\n    returnValues.isMiddle,\n    returnValues.isMouseDown,\n    returnValues.isMouseOverTargetEl,\n    returnValues.isMovingLeft,\n    returnValues.isMovingRight,\n    returnValues.isRight,\n    returnValues.mouseDirection,\n    returnValues.mousePositionOnEL,\n    returnValues.currentMousePosition,\n  ]);\n\n  return returnValues;\n}\n","const initialEvents = [\n  {\n    // This event starts at 0s and ends at 2s (duration: 2s)\n    id: \"5dec1ba4-05ee-11ec-89a4-88e9fe6854f2\",\n    start: 0,\n    duration: 2,\n  },\n  {\n    // This event starts at 6s and ends at 7s (duration: 1s)\n    id: \"63a81dcc-05ee-11ec-89a4-88e9fe6854f2\",\n    start: 6,\n    duration: 1,\n  },\n];\n\nexport const getEventsFromApi = () => {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve(initialEvents), 800)\n  );\n};\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { SineWave } from \"components\";\nimport {\n  convertSecondsToPixels,\n  getStartOrEndPositionBoundary,\n  uid,\n} from \"../../utils\";\nimport { MemoizedSelectionField } from \"../../components/SelectionField/SelectionField\";\nimport { getEventsFromApi } from \"../../api/initialEvents\";\n\nconst Container = styled.div`\n  position: relative;\n`;\n\n// The Overlay is a div that lies on top of the chart to capture mouse events\nconst Overlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 170px;\n  z-index: 10;\n`;\n\n// The chart canvas will be the same height/width as the ChartWrapper\n// https://www.chartjs.org/docs/3.2.1/configuration/responsive.html#important-note\nconst ChartWrapper = styled.div``;\n\nconst SignalView = () => {\n  // Access the height of the chart as chartWrapperRef.current?.clientHeight to determine the height to set on events\n  const chartWrapperRef = useRef();\n  //   const mouseDown = useRef(false);\n  const [mouseDown, setMouseDown] = useState(false);\n  const [currentSelectionID, setCurrentSelectionID] = useState(null);\n  const [selections, setSelections] = useState([]);\n\n  const handleInitialSelectionFieldMouseDown = (e) => {\n    // 1. track current mouse down position\n    // 2. generate unique id, initial/end position to track for later\n    // 3. track via state what is the most recently created selection field for easy reference\n    const currentCursorPosition = e.pageX;\n    const generatedID = uid();\n    setMouseDown(true);\n    setCurrentSelectionID(generatedID);\n    setSelections((prevSelections) => [\n      ...prevSelections,\n      {\n        generatedID,\n        start: getStartOrEndPositionBoundary(currentCursorPosition), //on initial start set both start and end to same\n        end: getStartOrEndPositionBoundary(currentCursorPosition),\n      },\n    ]);\n  };\n\n  const handleInitialSelectionFieldCreationMovement = (e) => {\n    //1. Check if we are currently mouse down\n    //3. Establish boundaries to match axis\n    //2. Update start & end position, and direction on specific selection ID\n    if (mouseDown) {\n      setSelections((prevSelections) => {\n        const currentSpot = e.pageX;\n\n        return prevSelections.map((prevSelection) => {\n          if (prevSelection.generatedID === currentSelectionID) {\n            return {\n              ...prevSelection,\n              end: getStartOrEndPositionBoundary(currentSpot),\n            };\n          }\n\n          return prevSelection;\n        });\n      });\n    }\n  };\n\n  const handleInitialSelectionFieldMouseUp = () => {\n    // 1. keep track of when mouse down is false\n    setMouseDown(false);\n\n    // clean data points to get correct start and ends\n    setSelections((prevSelections) => {\n      return prevSelections.map((prevSelection) => {\n        let cleanObj = { ...prevSelection };\n        // flip start and end to be normal, probably a better way to handle but this is my quick solution\n        if (prevSelection.end < prevSelection.start) {\n          cleanObj = {\n            ...prevSelection,\n            start: prevSelection.end,\n            end: prevSelection.start,\n          };\n        }\n\n        //this is for if a user just clicks on the graph and doesn't drag could also just delete it but this seemed nicer\n        if (prevSelection.end === prevSelection.start) {\n          cleanObj = {\n            ...cleanObj,\n            start: getStartOrEndPositionBoundary(cleanObj.start - 20),\n            end: getStartOrEndPositionBoundary(cleanObj.end + 20),\n          };\n        }\n\n        return cleanObj;\n      });\n    });\n  };\n\n  const handleSelectionFieldResize = useCallback(\n    // MouseContext\n    //   currentMousePositionStatus,\n    //   lastKnownMouseDirection,\n    //   currentMousePosition,\n    //   currentMouseDirection,\n    //   isMouseOverTargetEl,\n    //   isMouseDown,\n    //   mouseDownPositionStatus,\n    //   currentMouseDownPosition,\n    //   currentMouseUpPosition,\n    (fieldId, mouseContext, el) => {\n      setCurrentSelectionID(fieldId);\n      setSelections((prevSelections) =>\n        prevSelections.map((prevSelection) => {\n          if (!mouseContext.mouseDownPositionStatus) return null;\n\n          if (prevSelection.generatedID === fieldId) {\n            if (mouseContext.mouseDownPositionStatus === \"middle\") {\n              const elBoundingRect = el.getBoundingClientRect();\n\n              const diff = Math.abs(\n                mouseContext.currentMousePosition -\n                  mouseContext.lastKnownMouseDirection\n              );\n\n              const isMouseMovingRight =\n                mouseContext.currentMouseDirection === \"right\";\n\n              const newLeft = Math.abs(\n                isMouseMovingRight\n                  ? diff + elBoundingRect.left\n                  : diff - elBoundingRect.left\n              );\n\n              const newRight = Math.abs(\n                isMouseMovingRight\n                  ? diff + elBoundingRect.right\n                  : diff - elBoundingRect.right\n              );\n\n              return {\n                ...prevSelection,\n                start: getStartOrEndPositionBoundary(newLeft),\n                end: getStartOrEndPositionBoundary(newRight),\n              };\n            }\n\n            const keyBasedOnDirection =\n              mouseContext.mouseDownPositionStatus === \"left\" ? \"start\" : \"end\";\n\n            return {\n              ...prevSelection,\n              ...{\n                [keyBasedOnDirection]: getStartOrEndPositionBoundary(\n                  mouseContext.currentMousePosition\n                ),\n              },\n            };\n          }\n\n          return prevSelection;\n        })\n      );\n    },\n    []\n  );\n\n  useEffect(() => {\n    getEventsFromApi().then((res) => {\n      const mapped = res.map((item) => ({\n        generatedID: item.id,\n        start: convertSecondsToPixels(item.start),\n        end: convertSecondsToPixels(item.duration + item.start),\n      }));\n\n      //Could do this later, setting state in the .then is a bit problematic with race conditions but decided not to fix due to time\n      setSelections((prevSelections) => [...mapped, ...prevSelections]);\n    });\n  }, []);\n\n  useEffect(() => {\n    const keyListener = (e) => {\n      if (e.key === \"Backspace\") {\n        setSelections((prevSelections) => {\n          return prevSelections.filter(\n            (prevSelection) => prevSelection.generatedID !== currentSelectionID\n          );\n        });\n      }\n    };\n\n    document.addEventListener(\"keydown\", keyListener);\n\n    return () => {\n      document.removeEventListener(\"keydown\", keyListener);\n    };\n  }, [currentSelectionID]);\n\n  return (\n    <Container>\n      <ChartWrapper ref={chartWrapperRef}>\n        <SineWave samplingRate={50} lowerBound={0} upperBound={10} />\n      </ChartWrapper>\n      <Overlay\n        className=\"overlay\"\n        onMouseDown={handleInitialSelectionFieldMouseDown}\n        onMouseMove={handleInitialSelectionFieldCreationMovement}\n        onMouseUp={handleInitialSelectionFieldMouseUp}\n      >\n        {selections.map((selection) => (\n          <MemoizedSelectionField\n            key={selection.generatedID}\n            fieldId={selection.generatedID}\n            height={chartWrapperRef.current?.clientHeight}\n            start={selection.start}\n            end={selection.end}\n            isMouseDown={mouseDown}\n            onResize={handleSelectionFieldResize}\n            active={selection.generatedID === currentSelectionID}\n          />\n        ))}\n      </Overlay>\n\n      <div style={{ padding: \"0 32px\" }}>\n        <h2>Layers</h2>\n        {selections.map((selection, i) => (\n          <li\n            style={{\n              cursor: \"pointer\",\n              textDecoration:\n                selection.generatedID === currentSelectionID\n                  ? \"underline\"\n                  : \"none\",\n            }}\n            key={selection.generatedID}\n            onClick={() => {\n              setCurrentSelectionID(selection.generatedID);\n            }}\n          >\n            Layer number {i + 1} - ID {selection.generatedID}\n          </li>\n        ))}\n      </div>\n    </Container>\n  );\n};\n\nexport default SignalView;\n","import { SignalView } from 'views';\n\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <SignalView/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}